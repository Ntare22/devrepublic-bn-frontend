// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`resetPassword component tests should render resetPassword title 1`] = `
<Provider
  store={
    Object {
      "dispatch": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
      Symbol(observable): [Function],
    }
  }
>
  <Connect(resetPassword)
    history={Object {}}
    location={
      Object {
        "search": "http://localhost:3000/password/reset?token=thisismyfaketoken",
      }
    }
    push={[MockFunction]}
    resetPasswordAction={[MockFunction]}
    user={Object {}}
  >
    <resetPassword
      history={Object {}}
      location={
        Object {
          "search": "http://localhost:3000/password/reset?token=thisismyfaketoken",
        }
      }
      push={[MockFunction]}
      resetPasswordAction={[Function]}
      user={
        Object {
          "error": null,
          "user": null,
        }
      }
    >
      <div
        className="content"
      >
        <div
          className="container p-5 justify-content-md-center"
        >
          <form
            className="form-check text-center"
            onSubmit={[Function]}
          >
            <div
              className="form-group justify-content-center align-items-center"
            >
              <h1>
                 Reset your password 
              </h1>
              <ErrorAlert
                message=""
                otherClassName="center col-md-4"
                textColor=""
                visible={false}
              >
                <Alert
                  className="text- center col-md-4"
                  closeAriaLabel="Close"
                  color="info"
                  fade={true}
                  isOpen={false}
                  tag="div"
                  transition={
                    Object {
                      "appear": true,
                      "baseClass": "fade",
                      "baseClassActive": "show",
                      "enter": true,
                      "exit": true,
                      "in": true,
                      "mountOnEnter": false,
                      "onEnter": [Function],
                      "onEntered": [Function],
                      "onEntering": [Function],
                      "onExit": [Function],
                      "onExited": [Function],
                      "onExiting": [Function],
                      "tag": "div",
                      "timeout": 150,
                      "unmountOnExit": true,
                    }
                  }
                >
                  <Fade
                    appear={true}
                    baseClass="fade"
                    baseClassActive="show"
                    className="text- center col-md-4 alert alert-info"
                    enter={true}
                    exit={true}
                    in={false}
                    mountOnEnter={false}
                    onEnter={[Function]}
                    onEntered={[Function]}
                    onEntering={[Function]}
                    onExit={[Function]}
                    onExited={[Function]}
                    onExiting={[Function]}
                    role="alert"
                    tag="div"
                    timeout={150}
                    unmountOnExit={true}
                  >
                    <Transition
                      appear={true}
                      enter={true}
                      exit={true}
                      in={false}
                      mountOnEnter={false}
                      onEnter={[Function]}
                      onEntered={[Function]}
                      onEntering={[Function]}
                      onExit={[Function]}
                      onExited={[Function]}
                      onExiting={[Function]}
                      timeout={150}
                      unmountOnExit={true}
                    />
                  </Fade>
                </Alert>
              </ErrorAlert>
              <input
                className="form-control text-center center col-md-4"
                onChange={[Function]}
                pattern="(?=.*\\\\d)(?=.*[A-Z])(?=.*[a-z])(?=.*\\\\W).{8,30}"
                placeholder="New Password"
                required={true}
                type="password"
                value=""
              />
              <div
                className="invalid-feedback text-lg-center"
              >
                Use a password of at least 8 characters: uppercase, lowercase letters, numbers and special characters.
              </div>
            </div>
            <button
              className="btn btn-primary col-md-2"
              type="submit"
            >
              <span
                className="spinner-border-sm"
              />
              Â 
              RESET
            </button>
          </form>
        </div>
      </div>
    </resetPassword>
  </Connect(resetPassword)>
</Provider>
`;
